<h3>Products</h3>
@page "/products"
@using SWH.Models
@using SWH.Interfaces
@using SWH.Shared.Components
@using SWH.Shared.enums
@inject IProductType ProductTypeController
@inject IProduct ProductController
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager Nav;

<MudTable Items="_storage"
          @ref="_table"
          Dense="true" 
          CanCancelEdit="true"
          @bind-SelectedItem="selectedItem"
          IsEditRowSwitchingBlocked="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          RowEditCommit="CommitEdit"
          RowEditCancel="ResetItemToOriginalValues"
          RowEditPreview="Backup"
          Filter="new Func<Stock, bool>(FilterFunc1)">

    <ToolBarContent>
        <MudItem xs="6">
            <MudTextField @bind-Value="searchString1" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" MaxLength="45" Clearable/>
        </MudItem>
        <MudSpacer/>
        <MudTooltip Class="align-content-lg-end" Text="Add product">
            <MudIconButton OnClick="AddProduct" Icon="@Icons.Material.Outlined.Add" Size="Size.Medium"/>
        </MudTooltip>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Stock, object>(x => x.ProductType.Name)">Product Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Stock, object>(x => x.ProductType.Price)">Price</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Stock, object>(x => x.ProductType.MaxCapacity)">Max Quantity</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Stock, object>(x => x.Quantity)">Current Storage</MudTableSortLabel>
        </MudTh>
        <MudTh> Delete</MudTh>
    </HeaderContent>
    <RowTemplate Context="context">
        <MudTd DataLabel="name">@context.ProductType.Name</MudTd>
        <MudTd DataLabel="price">
            @context.ProductType.Price HUF
        </MudTd>
        <MudTd DataLabel="maxQuantity">@context.ProductType.MaxCapacity</MudTd>
        <MudTd DataLabel="Storage">@context.Quantity</MudTd>
        <MudTd DataLabel="del">
            <MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Error" OnClick="@(() => { DeleteProduct(context.ProductType.id); })"/>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate Context="productTypeContext">
        <MudTd DataLabel="name">@productTypeContext.ProductType.Name</MudTd>
        <MudTd DataLabel="price">
            <MudNumericField @bind-Value="selectedItem.ProductType.Price" Required MaxLength="5" Min="0" Max="10000" Immediate/>
        </MudTd>
        <MudTd DataLabel="currentStock">@productTypeContext.Quantity</MudTd>
        <MudTd DataLabel="maxQuantity">@productTypeContext.ProductType.MaxCapacity</MudTd>
    </RowEditingTemplate>
</MudTable>

@code {

    private MudTable<Stock> _table;
    List<ProductType> _productTypes = new();
    List<Product> _products = new();
    List<Stock> _storage = new();
    private Stock backup = new();
    private Stock selectedItem;
    private string searchString1 = "";
    DialogOptions smallWidth = new() { MaxWidth = MaxWidth.Small, FullWidth = true };

    protected override async Task OnInitializedAsync()
    {
        _productTypes = await ProductTypeController.GetAllProductTypes();
        _products = await ProductController.GetAllProducts();

    //for each item in storage have the product type and for every product that has the same product type add the quantity to the stock
        foreach (var stock in _productTypes.Select(productType => new Stock { ProductType = productType }))
        {
            foreach (var product in _products.Where(product => product.ProductType.Name == stock.ProductType.Name))
            {
                stock.Quantity += product.Quantity;
            }

            _storage.Add(stock);
        }
    }


    private async void AddProduct()
    {
        var res = await DialogService.ShowAsync<AddProduct>("Add new Product type", smallWidth);
        var result = await res.Result;
        if (!result.Data.Equals(true))
        {
            Snackbar.Add(result.Data.ToString(), Severity.Error);
            return;
        }
        _productTypes = await ProductTypeController.GetAllProductTypes();
        Nav.NavigateTo(Nav.Uri,forceLoad:true);
        
    }

    private async void DeleteProduct(string index)
    {
        try
        {
            DialogParameters parameters = new() { { "_content", "Are you sure you want to delete this product type?\n It can not be undone!" } };
            var result = await DialogService.ShowAsync<ConfirmDialog>("Warning!", parameters);
            var dialogResult = await result.Result;
            if (dialogResult.Canceled) return;
            ProductTypeController.DeleteProductType(index);
            _productTypes = await ProductTypeController.GetAllProductTypes();
            Nav.NavigateTo(Nav.Uri,forceLoad:true);
    
        }
        catch (Exception e)
        {
    //ignored
        }
    }

    private async void CommitEdit(object productType)
    {
        try
        {
            DialogParameters parameters = new() { { "_content", "Are you sure you want to save?" } };
            var result = await DialogService.ShowAsync<ConfirmDialog>("Warning!", parameters);
            var res = await result.Result;
            if (res.Canceled)
            {
                ResetItemToOriginalValues(productType);
                Snackbar.Add("Edit cancelled", Severity.Info);
            }
            else
            {
                var prodType = productType as Stock;
                if (prodType?.ProductType != null) ProductTypeController.UpdateProductType(prodType?.ProductType!);
                Snackbar.Add("Successfully saved edit", Severity.Success);
            }
            _productTypes = await ProductTypeController.GetAllProductTypes();
            StateHasChanged();
        }
        catch (Exception e)
        {
    //ignored
        }
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((Stock)element).ProductType = backup.ProductType;
        ((Stock)element).Quantity = backup.Quantity;
    }

    private void Backup(object element)
    {
        backup = new Stock
        {
            ProductType = ((Stock)element).ProductType,
            Quantity = ((Stock)element).Quantity,
        };
    }

    private bool FilterFunc1(Stock stock) => FilterFunc(stock, searchString1);

    private bool FilterFunc(Stock stock, string searchString)
    {
        return string.IsNullOrWhiteSpace(searchString) || stock.ProductType.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

}