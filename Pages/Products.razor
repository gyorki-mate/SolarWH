<h3>Products</h3>
@page "/products"
@using SWH.Models
@using SWH.Interfaces
@using SWH.Shared.Components
@using MongoDB.Bson
@inject IProduct ProductController
@inject ISnackbar Snackbar
@inject IDialogService DialogService


<MudTable Items="_products" Dense="true" CanCancelEdit="true"
          @bind-SelectedItem="selectedItem"
          IsEditRowSwitchingBlocked="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          RowEditCommit="CommitEdit"
          RowEditCancel="ResetItemToOriginalValues"
          RowEditPreview="Backup"
          Filter="new Func<Product, bool>(FilterFunc1)">

    <ToolBarContent>

        <MudItem xs="6">
            <MudTextField @bind-Value="searchString1" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="justify-content: end" MaxLength="45" Clearable/>
        </MudItem>
        <MudSpacer/>
        <MudTooltip Class="align-content-lg-end" Text="Add product">
            <MudIconButton OnClick="AddProduct" Icon="@Icons.Material.Outlined.Add" Size="Size.Large"/>
        </MudTooltip>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Product, object>(x => x.Name)">Product Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Product, object>(x => x.Price)">Price</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Product, object>(x => x.MaxQuantity)">Max Quantity</MudTableSortLabel>
        </MudTh>
        <MudTh> Delete</MudTh>
    </HeaderContent>
    <RowTemplate Context="productContext">
        <MudTd DataLabel="name">@productContext.Name</MudTd>
        <MudTd DataLabel="price">
            @productContext.Price HUF
        </MudTd>
        <MudTd DataLabel="maxQuantity">@productContext.MaxQuantity</MudTd>
        <MudTd DataLabel="del">
            <MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Error" OnClick="@(() => { DeleteProduct(productContext.id); })"/>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate Context="productContext">
        <MudTd DataLabel="name">@productContext.Name</MudTd>
        <MudTd DataLabel="price">
            <MudNumericField @bind-Value="selectedItem.Price" Required MaxLength="5" Min="0" Max="10000" Immediate/>
        </MudTd>
        <MudTd DataLabel="maxQuantity">@productContext.MaxQuantity</MudTd>
    </RowEditingTemplate>
</MudTable>

@code {

    List<Product> _products = new();
    private Product backup = new();
    private Product selectedItem;
    private string searchString1 = "";
    DialogOptions smallWidth = new() { MaxWidth = MaxWidth.Small, FullWidth = true };

    protected override async Task OnInitializedAsync()
    {
        _products = await ProductController.GetAllProducts();
    }

    private async void AddProduct()
    {
        var res = DialogService.Show<AddProduct>("Add new Product", smallWidth);
        var result = await res.Result;
        if (result.Data is null) return;
        _products = await ProductController.GetAllProducts();
        Snackbar.Add("Product added!", Severity.Success);
        StateHasChanged();
    }

    private async void DeleteProduct(string index)
    {
        try
        {
            DialogParameters parameters = new() { { "_content", "Are you sure you want to delete this product?\n It can not be undone!" } };
            var result = DialogService.Show<ConfirmDialog>("Warning!", parameters);
            var dialogResult = await result.Result;
            if (dialogResult.Cancelled) return;
            ProductController.DeleteProduct(index);
            Snackbar.Add("Product deleted!", Severity.Success);
            _products = await ProductController.GetAllProducts();
            StateHasChanged();
        }
        catch (Exception e)
        {
    //ignored
        }
    }

    private async void CommitEdit(object product)
    {
        Console.WriteLine(((Product)product).Price);
        try
        {
            DialogParameters parameters = new() { { "_content", "Are you sure you want to save?" } };
            var result = DialogService.Show<ConfirmDialog>("Warning!", parameters);
            var res = await result.Result;
            Console.WriteLine(res.Cancelled);
            if (res.Cancelled)
            {
                ResetItemToOriginalValues(product);
                Snackbar.Add("Edit cancelled", Severity.Info);
                Console.WriteLine("reset");
            }
            else
            {
                ProductController.UpdateProduct((Product)product);
                Snackbar.Add("Successfully saved edit", Severity.Success);
            }
            _products = await ProductController.GetAllProducts();
            StateHasChanged();
        }
        catch (Exception e)
        {
    //ignored
        }
    }

    private void ResetItemToOriginalValues(object element)
    {
        Console.WriteLine(backup.Price);
        ((Product)element).Name = backup.Name;
        ((Product)element).Price = backup.Price;
        ((Product)element).MaxQuantity = backup.MaxQuantity;
    }

    private void Backup(object element)
    {
        backup = new Product
        {
            Name = ((Product)element).Name,
            Price = ((Product)element).Price,
            MaxQuantity = ((Product)element).MaxQuantity
        };
    }

    private bool FilterFunc1(Product product) => FilterFunc(product, searchString1);

    private bool FilterFunc(Product product, string searchString)
    {
        return string.IsNullOrWhiteSpace(searchString) || product.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

}