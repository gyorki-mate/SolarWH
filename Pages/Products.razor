<h3>Products</h3>
@page "/products"
@using SWH.Models
@using SWH.Interfaces
@using SWH.Shared.Components
@inject IProduct ProductController
@inject ISnackbar Snackbar
@inject IDialogService DialogService


<MudTable Items="_products" Dense="true">
    <ToolBarContent>
        <MudTooltip Class="align-content-lg-end" Text="Add user">
            <MudIconButton OnClick="AddProduct" Icon="@Icons.Material.Outlined.Add" Size="Size.Large"/>
        </MudTooltip>
        <MudItem xs="6">
            <MudTextField @bind-Value="searchString1" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" MaxLength="45"/>
        </MudItem>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Product, object>(x => x.Name)">Product Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Product, object>(x => x.Price)">Price</MudTableSortLabel>
        </MudTh> <MudTh>
            <MudTableSortLabel SortBy="new Func<Product, object>(x => x.MaxQuantity)">Max Quantity</MudTableSortLabel>
        </MudTh>
        <MudTh> Delete</MudTh>
    </HeaderContent>
    <RowTemplate Context="productContext">
        <MudTd DataLabel="name">@productContext.Name</MudTd>
        <MudTd DataLabel="price"><MudIcon Icon="@Icons.Filled.AttachMoney" Color="Color.Success"/> @productContext.Price  </MudTd>
        <MudTd DataLabel="maxQuantity">@productContext.MaxQuantity</MudTd>
        <MudTd DataLabel="del">
            <MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Error" OnClick="@(() => { DeleteProduct(productContext.id); })"/>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {

    List<Product> _products = new();
    private string searchString1 = "";
    DialogOptions smallWidth = new() { MaxWidth = MaxWidth.Small, FullWidth = true };

    protected override async Task OnInitializedAsync()
    {
        _products = await ProductController.GetAllProducts();
    }

    private async void AddProduct()
    {
        var res = DialogService.Show<AddProduct>("Add new Product", smallWidth);
        var result = await res.Result;
        if (result.Data is null) return;
        _products = await ProductController.GetAllProducts();
        Snackbar.Add("Product added!", Severity.Success);
        StateHasChanged();
    }

    private async void DeleteProduct(string index)
    {
        Console.WriteLine(index);
        try
        {
            DialogParameters parameters = new() { { "_content", "Are you sure you want to delete this product? It can not be undone." } };
            var result = DialogService.Show<ConfirmDialog>("Warning!", parameters);
            var dialogResult = await result.Result;
            if (!dialogResult.Data.Equals(true)) return;
            ProductController.DeleteProduct(index);
            Snackbar.Add("Product deleted!", Severity.Success);
            _products = await ProductController.GetAllProducts();
            StateHasChanged();
        }
        catch (Exception e)
        {
    //ignored
        }
    }

}