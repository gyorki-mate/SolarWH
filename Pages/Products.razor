<h3>Products</h3>
@page "/products"
@using SWH.Models
@using SWH.Interfaces
@using SWH.Shared.Components
@using MongoDB.Bson
@inject IProductType ProductTypeController
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudTable Items="_productTypes" Dense="true" CanCancelEdit="true"
          @bind-SelectedItem="selectedItem"
          IsEditRowSwitchingBlocked="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          RowEditCommit="CommitEdit"
          RowEditCancel="ResetItemToOriginalValues"
          RowEditPreview="Backup"
          Filter="new Func<ProductType, bool>(FilterFunc1)">

    <ToolBarContent>
        <MudItem xs="6">
            <MudTextField @bind-Value="searchString1" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" MaxLength="45" Clearable/>
        </MudItem>
        <MudSpacer/>
        <MudTooltip Class="align-content-lg-end" Text="Add product">
            <MudIconButton OnClick="AddProduct" Icon="@Icons.Material.Outlined.Add" Size="Size.Large"/>
        </MudTooltip>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<ProductType, object>(x => x.Name)">Product Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<ProductType, object>(x => x.Price)">Price</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<ProductType, object>(x => x.MaxCapacity)">Max Quantity</MudTableSortLabel>
        </MudTh>
        <MudTh> Delete</MudTh>
    </HeaderContent>
    <RowTemplate Context="productTypeContext">
        <MudTd DataLabel="name">@productTypeContext.Name</MudTd>
        <MudTd DataLabel="price">
            @productTypeContext.Price HUF
        </MudTd>
        <MudTd DataLabel="maxQuantity">@productTypeContext.MaxCapacity</MudTd>
        <MudTd DataLabel="del">
            <MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Error" OnClick="@(() => { DeleteProduct(productTypeContext.id); })"/>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate Context="productTypeContext">
        <MudTd DataLabel="name">@productTypeContext.Name</MudTd>
        <MudTd DataLabel="price">
            <MudNumericField @bind-Value="selectedItem.Price" Required MaxLength="5" Min="0" Max="10000" Immediate/>
        </MudTd>
        <MudTd DataLabel="maxQuantity">@productTypeContext.MaxCapacity</MudTd>
    </RowEditingTemplate>
</MudTable>

@code {

    List<ProductType> _productTypes = new();
    private ProductType backup = new();
    private ProductType selectedItem;
    private string searchString1 = "";
    DialogOptions smallWidth = new() { MaxWidth = MaxWidth.Small, FullWidth = true };

    protected override async Task OnInitializedAsync()
    {
        _productTypes = await ProductTypeController.GetAllProductTypes();
    }

    private async void AddProduct()
    {
        var res = DialogService.Show<AddProduct>("Add new Product type", smallWidth);
        var result = await res.Result;
        if (result.Data is null) return;
        _productTypes = await ProductTypeController.GetAllProductTypes();
        Snackbar.Add("Product type added!", Severity.Success);
        StateHasChanged();
    }

    private async void DeleteProduct(string index)
    {
        try
        {
            DialogParameters parameters = new() { { "_content", "Are you sure you want to delete this product type?\n It can not be undone!" } };
            var result = DialogService.Show<ConfirmDialog>("Warning!", parameters);
            var dialogResult = await result.Result;
            if (dialogResult.Cancelled) return;
            ProductTypeController.DeleteProductType(index);
            Snackbar.Add("Product type deleted!", Severity.Success);
            _productTypes = await ProductTypeController.GetAllProductTypes();
            StateHasChanged();
        }
        catch (Exception e)
        {
    //ignored
        }
    }

    private async void CommitEdit(object productType)
    {
        Console.WriteLine(((ProductType)productType).Price);
        try
        {
            DialogParameters parameters = new() { { "_content", "Are you sure you want to save?" } };
            var result = DialogService.Show<ConfirmDialog>("Warning!", parameters);
            var res = await result.Result;
            if (res.Cancelled)
            {
                ResetItemToOriginalValues(productType);
                Snackbar.Add("Edit cancelled", Severity.Info);
            }
            else
            {
                ProductTypeController.UpdateProductType((ProductType)productType);
                Snackbar.Add("Successfully saved edit", Severity.Success);
            }
            _productTypes = await ProductTypeController.GetAllProductTypes();
            StateHasChanged();
        }
        catch (Exception e)
        {
    //ignored
        }
    }

    private void ResetItemToOriginalValues(object element)
    {
        Console.WriteLine(backup.Price);
        ((ProductType)element).Name = backup.Name;
        ((ProductType)element).Price = backup.Price;
        ((ProductType)element).MaxCapacity = backup.MaxCapacity;
    }

    private void Backup(object element)
    {
        backup = new ProductType
        {
            Name = ((ProductType)element).Name,
            Price = ((ProductType)element).Price,
            MaxCapacity = ((ProductType)element).MaxCapacity
        };
    }

    private bool FilterFunc1(ProductType product) => FilterFunc(product, searchString1);

    private bool FilterFunc(ProductType product, string searchString)
    {
        return string.IsNullOrWhiteSpace(searchString) || product.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

}