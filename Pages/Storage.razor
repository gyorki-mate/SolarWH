@using SWH.Models
@using SWH.Shared.Components
@using SWH.Shared.enums
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject Interfaces.ICompartment CompartmentController;
@inject Interfaces.IProduct ProductController;
@inject Interfaces.IProject ProjectController;
@inject Interfaces.IProductType ProductTypeController;


@page "/storage"

<MudTabs Elevation="4" Rounded="true" Color="@Color.Dark" Class="mt-3" @bind-ActivePanelIndex="_activeTabIndex">
    <MudTabPanel Text="Unstored Items">
        <MudTable Items="_nonStoredProducts"
                  Dense="true"
                  Filter="new Func<Product, bool>(FilterFunc1)">

            <ToolBarContent>
                <MudItem xs="6">
                    <MudTextField @bind-Value="_searchString1" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" MaxLength="45" Clearable/>
                </MudItem>
                <MudSpacer/>
                <MudTooltip Class="align-content-lg-end" Text="Add product">
                    <MudIconButton OnClick="NewShipment" Icon="@Icons.Material.Outlined.Add" Size="Size.Medium"/>
                </MudTooltip>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Product, object>(x => x.ProductType.Name)">Product Name</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Product, object>(x => x.Quantity)">Currently unstored </MudTableSortLabel>
                </MudTh>
                <MudTh> Delete</MudTh>
            </HeaderContent>
            <RowTemplate Context="context">
                <MudTd DataLabel="name">@context.ProductType.Name</MudTd>
                <MudTd DataLabel="Storage">@context.Quantity</MudTd>
                <MudTd DataLabel="del">
                    <MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Error" OnClick="@(() => { DeleteProduct(context.Id); })"/>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
    @for (var s = 0; s < 8; s++)
    {
        var compartmentText = "Compartment " + (s + 1);
        var s5 = s;
        <MudTabPanel Text="@compartmentText">

            @{
                var s4 = s5;
            }
            <MudGrid Class="mt-3">
                @for (var r = 0; r < 4; r++)
                {
                    @for (var c = 0; c < 4; c++)
                    {
                        var containerId = r * 4 + c + 1 + 16 * (_activeTabIndex - 1);
                        var containerText = "Container " + containerId;
                        var s3 = s4;
                        var c3 = c;
                        var r3 = r;
                        <MudItem xs="3">
                            @{
                                var s2 = s3;
                                var c2 = c3;
                                var r2 = r3;
                            }

                            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                                <MudText>@containerText</MudText>

                                @if (_compartments.Find(x => x.CompartmentId == s2 + 1)?.Shelves?.Find(x => x.ShelfId == containerId)?.Product.Id != null)
                                {
                                    var product = _compartments.Find(x => x.CompartmentId == (s2 + 1))?.Shelves?.Find(x => x.ShelfId == containerId).Product;
                                    var productText = product.ProductType.Name + " (" + product.Quantity + ")";
                                    <MudText>@productText</MudText>
                                }
                                else
                                {
                                    var s1 = s2;
                                    var c1 = c2;
                                    var r1 = r2;
                                    <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small" Class="ml-3" OnClick="@(() => { StoreProduct(c1 + 1 + r1 * 4 + 16 * (_activeTabIndex - 1), s1 + 1); })"/>
                                }
                            </MudPaper>
                        </MudItem>
                    }
                }
            </MudGrid>
        </MudTabPanel>
    }
</MudTabs>

@code {
    private int _activeTabIndex;

    readonly DialogOptions _smallWidth = new() { MaxWidth = MaxWidth.Small, FullWidth = true };
    private string _searchString1 = "";
    List<Project> _projects = new();
    List<Product> _allProductsList = new();
    List<Compartment> _compartments = new();
    private List<Product> _nonStoredProducts = new();
    readonly List<ProjectProducts> _shitFromProjects = new();
    readonly List<ProjectProducts> _allShitWeHave = new();
    readonly List<ProjectProducts> _getAllShit = new();
    private List<ProductType> _productTypes = new();

    protected override async Task OnInitializedAsync()
    {
        _nonStoredProducts = await ProductController.GetAllNonStoredProducts();
        _productTypes = await ProductTypeController.GetAllProductTypes();
        _compartments = await CompartmentController.GetAllCompartments();
        _projects = await ProjectController.GetAllProjects();
        _allProductsList = await ProductController.GetAllProducts();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) return;
        AllWeNeed();
    }

    private void AllWeNeed()
    {
        foreach (var reqProducts in _projects.SelectMany(p => p.Products.Where(pProduct => pProduct.ProductType.Name == _nonStoredProducts.Find(x => x.ProductType.Name == pProduct.ProductType.Name)?.ProductType.Name)))
        {
            if (_shitFromProjects.Find(x => x.ProductType.Name == reqProducts.ProductType.Name) == null)
            {
                _shitFromProjects.Add(new ProjectProducts { ProductType = reqProducts.ProductType, Quantity = reqProducts.Quantity });
            }
            else
            {
                _shitFromProjects.Find(x => x.ProductType.Name == reqProducts.ProductType.Name)!.Quantity += reqProducts.Quantity;
            }
        }

        foreach (var stock in _productTypes.Select(productType => new ProjectProducts() { ProductType = productType }))
        {
            foreach (var product in _allProductsList.Where(product => product.ProductType.Name == stock.ProductType.Name))
            {
                stock.Quantity += product.Quantity;
            }
            _allShitWeHave.Add(stock);
        }

        foreach (var projectProduct in _shitFromProjects.Where(projectProduct => _allShitWeHave.Find(x => x.ProductType.Name == projectProduct.ProductType.Name)?.Quantity < projectProduct.Quantity))
        {
            _getAllShit.Add(new ProjectProducts { ProductType = projectProduct.ProductType, Quantity = (_allShitWeHave.Find(x => x.ProductType.Name == projectProduct.ProductType.Name)?.Quantity - projectProduct.Quantity) * -1 ?? 0 });
        }
    }

    private async void NewShipment()
    {
        var res = await DialogService.ShowAsync<NewShipmentDialog>("New Shipment", _smallWidth);
        var result = await res.Result;
    //DO NOT WRITE CODE ABOVE THIS LINE OR THE APP WILL CRASH AS I DID NOT CARE TO HANDLE THE NULL EXCEPTION
        if (result.Canceled) return;
        if (result.Data is null)
        {
            Snackbar.Add("Something went wrong!", Severity.Error);
            return;
        }
        Snackbar.Add("Successfully added new shipment", Severity.Success);
        _nonStoredProducts = await ProductController.GetAllNonStoredProducts();
        StateHasChanged();
    }

    private async void StoreProduct(int sid, int cid)
    {
        var res = await DialogService.ShowAsync<AddToShelf>("Add product to shelf", _smallWidth);
        var result = await res.Result;
        if (result.Canceled) return;

        if (result.Data.GetType() != typeof(Product))
        {
            Snackbar.Add("An error has occurred!", Severity.Error);
            return;
        }

        var product = (Product)result.Data;
        var compartment = _compartments.FindLast(x => x.CompartmentId == cid);

        if (compartment != null)
        {
            compartment.Shelves.Find(x => x.ShelfId == sid).Product = product;
            var updateRes = await CompartmentController.UpdateCompartment(compartment)!;
            //update product in db
            
    //gets error from update 
            Console.WriteLine(updateRes);
        }

        Snackbar.Add("Successfully added new product", Severity.Success);
        StateHasChanged();
    }

    private async void DeleteProduct(string index)
    {
        try
        {
            DialogParameters parameters = new() { { "Content", "Are you sure you want to delete this product? It can not be undone!" } };
            var result = await DialogService.ShowAsync<ConfirmDialog>("Warning!", parameters);
            var dialogResult = await result.Result;
            if (dialogResult.Canceled) return;
            ProductController.DeleteProduct(index);
            _nonStoredProducts = await ProductController.GetAllNonStoredProducts();
            Snackbar.Add("Successfully deleted product", Severity.Success);
            StateHasChanged();
        }
        catch (Exception e)
        {
    //ignored
        }
    }

    private bool FilterFunc1(Product product) => FilterFunc(product, _searchString1);

    private bool FilterFunc(Product product, string searchString)
    {
        return string.IsNullOrWhiteSpace(searchString) || product.ProductType.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

}