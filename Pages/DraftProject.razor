@page "/projects/draft/{projectIndex}"
@using SWH.Models
@using SWH.Interfaces
@using SWH.Shared.Components
@using SWH.Shared.enums
@inject IDialogService DialogService
@inject IProject ProjectController;
@inject IProductType ProductTypeController;
@inject IProduct ProductController;
@inject ISnackbar Snackbar;
@inject NavigationManager NavManager

<h3>Drafting Project: @_projectName</h3>
Current Cost: @_newCost

<MudTable Items="_productList" Dense="true" CanCancelEdit="true"
          @bind-SelectedItem="_selectedItem"
          IsEditRowSwitchingBlocked="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          RowEditCommit="CommitEdit"
          RowEditCancel="ResetItemToOriginalValues"
          RowEditPreview="Backup"
          Filter="new Func<ProjectProducts, bool>(FilterFunc1)">

    <ToolBarContent>
        <MudItem xs="6">
            <MudTextField @bind-Value="_searchString1" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" MaxLength="45" Clearable/>
        </MudItem>
        <MudSpacer/>
        <MudTooltip Class="align-content-lg-end" Text="Add product">
            <MudIconButton OnClick="AddProduct" Icon="@Icons.Material.Outlined.Add" Size="Size.Medium"/>
        </MudTooltip>
        <MudTooltip Class="align-content-lg-end" Text="Save project">
            <MudIconButton OnClick="Draft" Icon="@Icons.Material.Outlined.Save" Size="Size.Medium"/>
        </MudTooltip>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<ProjectProducts, object>(x => x.productType.Name)">Product Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<ProjectProducts, object>(x => x.productType.Price)">Product Price</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<ProjectProducts, object>(x => x.Quantity)">Required Amount</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Stock, object>(x => x.Quantity)">Current Storage</MudTableSortLabel>
        </MudTh>
        <MudTh> Delete</MudTh>
    </HeaderContent>
    <RowTemplate Context="productListContext">
        <MudTd DataLabel="name">@productListContext.productType.Name</MudTd>
        <MudTd DataLabel="price">@productListContext.productType.Price HUF</MudTd>
        <MudTd DataLabel="quantity">@productListContext.Quantity</MudTd>
        <MudTd DataLabel="storage">
            @foreach (var stock in _storage.Where(stock => stock.ProductType.Name == productListContext.productType.Name))
            {
                @stock.Quantity
            }
        </MudTd>
        <MudTd DataLabel="del">
            <MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Error" OnClick="@(() => { DeleteProduct(productListContext.productType.Name); })"/>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate Context="productListContext">
        <MudTd DataLabel="name">@productListContext.productType.Name</MudTd>
        <MudTd DataLabel="price">@productListContext.productType.Price HUF</MudTd>
        <MudTd DataLabel="quantity">
            <MudNumericField @bind-Value="_selectedItem.Quantity" Required MaxLength="5" Min="1" Max="10000" Immediate/>
        </MudTd>
        <MudTd DataLabel="storage">
            @foreach (var stock in _storage.Where(stock => stock.ProductType.Name == productListContext.productType.Name))
            {
                @stock.Quantity
            }
        </MudTd>
    </RowEditingTemplate>
</MudTable>

@code {

    [Parameter]
    public string ProjectIndex { get; set; }

    //List<ProductType> _products = new();

    private IEnumerable<ProductType> _productTypes { get; set; } = new List<ProductType>();

    List<Product> _products = new();
    private Project _project;
    private string _projectName = "";
    private string _searchString1 = "";
    private string _newStatus = "Draft";
    private int _newCost;
    private DateOnly _estimatedDate;
    List<Stock> _storage = new();
    private List<ProjectProducts> _productList = new();
    private ProjectProducts _selectedItem;
    private ProjectProducts _backup = new();
    
    protected override async Task OnInitializedAsync()
    {
        _productTypes = await ProductTypeController.GetAllProductTypes();
        _products = await ProductController.GetAllProducts();
        _project = ProjectController.GetProject(ProjectIndex);
        _productList = _project.Products;
        _newCost = _project.Cost;
        _projectName = _project.Name;
        _estimatedDate = _project.UpdatedAt.AddDays(14);

        foreach (var stock in _productTypes.Select(productType => new Stock { ProductType = productType }))
        {
            foreach (var product in _products.Where(product => product.ProductType.Name == stock.ProductType.Name))
            {
                stock.Quantity += product.Quantity;
            }

            _storage.Add(stock);
        }
    }

    private async void Draft()
    {
        try
        {
            foreach (var product in from product in _productList
                from stock in _storage.Where(stock => product.productType.Name == stock.ProductType.Name && product.Quantity > stock.Quantity)
                select product)
            {
                foreach (var stock in _storage.Where(stock => product.productType.Name == stock.ProductType.Name && product.Quantity > stock.Quantity))
                {
                    _newStatus = "Wait";
                    _estimatedDate = _project.UpdatedAt.AddDays(21);
                }
            }
            var draftedProject = new Project
            {
                id = _project.id,
                Name = _project.Name,
                Location = _project.Description,
                Description = _project.Description,
                UserName = _project.UserName,
                PhoneNumber = _project.PhoneNumber,
                Status = _newStatus,
                Cost = _newCost,
                Products = _productList,
                EstimatedDate = _estimatedDate,
                UpdatedAt = DateOnly.FromDateTime(DateTime.Now),
                CreatedAt = _project.CreatedAt
            };

            DialogParameters parameters = new() { { "_content", "Are you sure you want to draft the project?" } };
            var result = await DialogService.ShowAsync<ConfirmDialog>("Warning!", parameters);
            var dialogResult = await result.Result;
            if (dialogResult.Canceled) return;
            Snackbar.Add("Project successfully drafted!", Severity.Success);
            ProjectController.UpdateProject(draftedProject);
        }
        catch (Exception e)
        {
    //ignored
        }
        NavManager.NavigateTo("/projects");
    }

    private async void AddProduct()
    {
        DialogParameters parameters = new() { { "productsList", _productList } };
        var res = await DialogService.ShowAsync<AddProductToDraft>("Add new Product for Draft", parameters);
        var result = await res.Result;
        if (result.Data is null) return;
        
        _newCost = 0;
        foreach (var product in _productList)
        {
            _newCost += product.productType.Price * product.Quantity;
        }
        Snackbar.Add("Product added to draft!", Severity.Success);
        StateHasChanged();
    }

    private async void DeleteProduct(string name)
    {
        try
        {
            DialogParameters parameters = new() { { "_content", "Are you sure you want to delete this product from the draft?" } };
            var result = await DialogService.ShowAsync<ConfirmDialog>("Warning!", parameters);
            var dialogResult = await result.Result;
            if (dialogResult.Canceled) return;

    //await this function to run in a separate thread
            await Task.Run(() =>
            {
                foreach (var product in _productList.Where(product => product.productType.Name == name))
                {
                    _productList.Remove(product);
                    _newCost -= product.productType.Price * product.Quantity;
                    Snackbar.Add("Product deleted!", Severity.Success);
                    break;
                }
            });

            StateHasChanged();
        }
        catch (Exception e)
        {
    //ignored
        }
    }

    private async void CommitEdit(object product)
    {
        try
        {
            DialogParameters parameters = new() { { "_content", "Are you sure you want to save your edit?" } };
            var result = await DialogService.ShowAsync<ConfirmDialog>("Warning!", parameters);
            var res = await result.Result;
            Console.WriteLine(res.Canceled);
            if (res.Canceled)
            {
                ResetItemToOriginalValues(product);
                Snackbar.Add("Edit cancelled", Severity.Info);
                Console.WriteLine("reset");
            }
            else
            {
                var view = (ProjectProducts)product;
                foreach (var prod in _productList.Where(prod => prod.productType.Name == view.productType.Name))
                {
                    prod.Quantity = _selectedItem.Quantity;
                }

                _newCost = 0;
                foreach (var prod in _productList)
                {
                    _newCost += prod.productType.Price * prod.Quantity;
                }
                Snackbar.Add("Successfully saved edit", Severity.Success);
            }
            _productList = _project.Products;
            StateHasChanged();
        }
        catch (Exception e)
        {
    //ignored
        }
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((ProjectProducts)element).productType.Name = _backup.productType.Name;
        ((ProjectProducts)element).productType.Price = _backup.productType.Price;
        ((ProjectProducts)element).Quantity = _backup.Quantity;
    }

    private void Backup(object element)
    {
        _backup = new ProjectProducts
        {
            productType = ((ProjectProducts)element).productType,
            Quantity = ((ProjectProducts)element).Quantity
        };
    }

    private bool FilterFunc1(ProjectProducts product) => FilterFunc(product, _searchString1);

    private bool FilterFunc(ProjectProducts product, string searchString)
    {
        return string.IsNullOrWhiteSpace(searchString) || product.productType.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }
    
}