@* @inject IProject ProjectController *@
@* @page "/ProjectExecution/{Id}" *@
@* @using SWH.Interfaces *@
@* @using SWH.Models *@
@* @using SWH.Shared.enums *@
@* <h3>ProjectExecution</h3> *@
@* $1$ Projektek listázása, projekt kiválasztása kivételezéshez, projekt státuszának #1# *@
@* $1$ automatikus beállítása („InProgress”) #1# *@
@* $1$ 2. Projekthez tartozó alkatrészek és azok elhelyezkedésének listázása (sor, oszlop, polc, #1# *@
@* $1$ rekesz kezelése) #1# *@
@* $1$ 3. Az alkatrészek összegyűjtése során megteendő útvonal optimalizálása  #1# *@
@* *@
@* <MudTable *@
@*     Items="Products" Dense="true" *@
@*     Filter="new Func<Project, bool>(FilterFunc1)"> *@
@*      *@
@* </MudTable> *@
@* *@
@* *@
@* @code { *@
@*     [Parameter] *@
@*     public string Id { get; set; } *@
@* *@
@*     public Project Project { get; set; } = new(); *@
@*     public List<ProjectProducts> Products { get; set; } = new(); *@
@*     private string _searchString1 = ""; *@
@* *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         await base.OnInitializedAsync(); *@
@*         Project =  ProjectController.GetProject(Id); *@
@*         Products = Project.Products; *@
@*     } *@
@*     private bool FilterFunc1(Project project) => FilterFunc(project, _searchString1); *@
@* *@
@*     private bool FilterFunc(Project project, string searchString) *@
@*     { *@
@*         return string.IsNullOrWhiteSpace(searchString) || project.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase); *@
@*     } *@
@* } *@