<h3>Projects</h3>
@page "/projects"
@using SWH.Models
@using SWH.Interfaces
@using SWH.Shared.Components
@inject IProject ProjectController
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavManager

<MudTable Items="_projects" Dense="true"
          CanCancelEdit="true"
          @bind-SelectedItem="_selectedItem"
          IsEditRowSwitchingBlocked="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          RowEditCommit="CommitEdit"
          RowEditCancel="ResetItemToOriginalValues"
          RowEditPreview="Backup"
          Filter="new Func<Project, bool>(FilterFunc1)">

    <ToolBarContent>
        <MudItem xs="6">
            <MudTextField @bind-Value="_searchString1" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="justify-content: end" MaxLength="45" Clearable/>
        </MudItem>
        <MudSpacer/>
        <MudTooltip Class="align-content-lg-end" Text="Add project">
            <MudIconButton OnClick="AddProject" Icon="@Icons.Material.Outlined.Add" Size="Size.Medium"/>
        </MudTooltip>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Project, object>(x => x.Name)">Project Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Project, object>(x => x.Location)">Location</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Project, object>(x => x.Status)">Project Status</MudTableSortLabel>
        </MudTh>
        <MudTh> Project Information</MudTh>
        <MudTh> Draft Project</MudTh>
        <MudTh> Delete</MudTh>
        <MudTh> Open Project</MudTh>
    </HeaderContent>
    <RowTemplate Context="projectContext">
        <MudTd DataLabel="name">@projectContext.Name</MudTd>
        <MudTd DataLabel="location">@projectContext.Location</MudTd>
        <MudTd DataLabel="status">@projectContext.Status</MudTd>
        <MudTd DataLabel="info">
            <MudIconButton Icon="@Icons.Filled.Info" Color="Color.Info" OnClick="@(() => { Information(projectContext.Id); })"/>
        </MudTd>
        <MudTd DataLabel="draft">
            <MudIconButton Icon="@Icons.Filled.Edit" OnClick="@(() => { DraftProject(projectContext.Id); })"/>
        </MudTd>
        <MudTd DataLabel="del">
            <MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Error" OnClick="@(() => { DeleteProject(projectContext.Id); })"/>
        </MudTd>
        <MudTd>
            @if (projectContext.Status.Equals("Draft"))
            {
                <MudTooltip Text="Schedule">
                    <MudIconButton Icon="@Icons.Material.Filled.EditAttributes" Title="Schedule" OnClick="@(() => { SetSchedule(projectContext.Id); })"/>
                </MudTooltip>
            }
            @if (projectContext.Status is "Scheduled")
            {
                <MudTooltip Text="Start">
                    <MudIconButton Icon="@Icons.Material.Filled.EditAttributes" OnClick="@(() => { SetInProgress(projectContext.Id); })"/>
                </MudTooltip>
            }
            @if (projectContext.Status is "InProgress")
            {
                <MudTooltip Text="Complete">
                    <MudIconButton Icon="@Icons.Material.Filled.Check" OnClick="@(() => { CompleteProject(projectContext.Id,true); })"/>
                </MudTooltip>
                <MudTooltip Text="Fail">
                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="@(() => { CompleteProject(projectContext.Id,false); })"/>
                </MudTooltip>
            }
        </MudTd>
    </RowTemplate>
</MudTable>

@code {

    List<Project> _projects = new();
    private Project _backup = new();
    private Project _selectedItem;
    private string _searchString1 = "";
    readonly DialogOptions _mediumWidth = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    protected override async Task OnInitializedAsync()
    {
        _projects = await ProjectController.GetAllProjects();
        foreach (var p in _projects.Where(p => p.Status == "InProgress"))
        {
            if (p.EstimatedDate <= DateOnly.FromDateTime(DateTime.Now)) ;
            {
                p.Status = "Completed";
            }
        }
    }

    private async void AddProject()
    {
        var res = await DialogService.ShowAsync<AddProject>("Add new Product", _mediumWidth);
        var result = await res.Result;
        if (result.Data is null) return;
        _projects = await ProjectController.GetAllProjects();
        Snackbar.Add("Project added!", Severity.Success);
        StateHasChanged();
    }

    private async void DeleteProject(string index)
    {
        try
        {
            DialogParameters parameters = new() { { "Content", "Are you sure you want to delete this project?\n It can not be undone!" } };
            var result = await DialogService.ShowAsync<ConfirmDialog>("Warning!", parameters);
            var dialogResult = await result.Result;
            if (dialogResult.Canceled) return;
            ProjectController.DeleteProject(index);
            Snackbar.Add("Project deleted!", Severity.Success);
            _projects = await ProjectController.GetAllProjects();
            StateHasChanged();
        }
        catch (Exception e)
        {
    //ignored
        }
    }

    private void DraftProject(string index)
    {
        NavManager.NavigateTo($"projects/draft/{index}");
    }

    private async void Information(string index)
    {
        try
        {
            DialogParameters parameters = new() { { "index", index } };
            var result = await DialogService.ShowAsync<ProjectInformation>("Project Information", parameters);
            var res = await result.Result;
            if (res.Canceled) return;
        }
        catch (Exception e)
        {
    //ignored
        }
    }

    private void SetSchedule(string index)
    {
        _projects.Find(p => p.Id == index)!.Status = "Scheduled";
    }

    private void SetInProgress(string index)
    {
        _projects.Find(p => p.Id == index)!.Status = "InProgress";
    }

    private void CompleteProject(string index, bool success)
    {
        _projects.Find(p => p.Id == index)!.Status = success ? "Completed" : "Failed";
    }

    private async void CommitEdit(object project)
    {
        try
        {
            DialogParameters parameters = new() { { "Content", "Are you sure you want to save?" } };
            var result = await DialogService.ShowAsync<ConfirmDialog>("Warning!", parameters);
            var res = await result.Result;
            Console.WriteLine(res.Canceled);
            if (res.Canceled)
            {
                ResetItemToOriginalValues(project);
                Snackbar.Add("Edit cancelled", Severity.Info);
            }
            else
            {
                ProjectController.UpdateProject((Project)project);
                Snackbar.Add("Successfully saved edit", Severity.Success);
            }
            _projects = await ProjectController.GetAllProjects();
            StateHasChanged();
        }
        catch (Exception e)
        {
    //ignored
        }
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((Project)element).Name = _backup.Name;
        ((Project)element).Location = _backup.Location;
        ((Project)element).Description = _backup.Description;
        ((Project)element).UserName = _backup.UserName;
        ((Project)element).PhoneNumber = _backup.PhoneNumber;
        ((Project)element).Status = _backup.Status;
    }

    private void Backup(object element)
    {
        _backup = new Project
        {
            Name = ((Project)element).Name,
            Location = ((Project)element).Location,
            Description = ((Project)element).Description,
            UserName = ((Project)element).UserName,
            PhoneNumber = ((Project)element).PhoneNumber,
            Status = ((Project)element).Status
        };
    }

    private bool FilterFunc1(Project project) => FilterFunc(project, _searchString1);

    private bool FilterFunc(Project project, string searchString)
    {
        return string.IsNullOrWhiteSpace(searchString) || project.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

}