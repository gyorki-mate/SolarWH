@using Models
@inject IDialogService DialogService
@inject Interfaces.IProductType ProductTypeController;
@inject Interfaces.IProduct ProductController;

<MudDialog>
    <DialogContent>
        <div class="d-flex flex-column py-1">
            <MudForm @ref="_form" @bind-IsValid="@_success">
                <MudGrid>
                    <MudItem xs="6">
                        <MudSelect T="string" Label="Products" HelperText="Pick the desired Product" MultiSelection="false" @bind-Value="Value" @bind-SelectedValues="Options" Immediate="true">
                            @foreach (var productType in _productsTypes)
                            {
                                <MudSelectItem T="string" Value="@productType.Id">@productType.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField @bind-Value="Amount" Label="Amount" Variant="Variant.Text" Min="1" Max="9999" Immediate="true"/>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Disabled="@(!_success)" Color="Color.Info" Variant="Variant.Filled" OnClick="Close">Add products</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    MudForm _form;
    List<ProductType?> _productsTypes = new();
    List<Product> _products = new();
    private IEnumerable<string> Options { get; set; } = new List<string>();
    private Product Product { get; set; } = new();
    private string Value { get; set; }
    private int Amount { get; set; }
    private bool _success;

    protected override async Task OnInitializedAsync()
    {
        _productsTypes = await ProductTypeController.GetAllProductTypes();
        _products = await ProductController.GetAllNonStoredProducts();
    }

    private async void Close()
    {
        ProductType? pType = new();
        Product.ProductType = pType;
        Product.Quantity = Amount;
        Product.IsStored = false;
        Product.ProductType.Id = Value;
        try
        {
            var name = _productsTypes.Find(x => x?.Id == Value)?.Name;
            DialogParameters parameters = new() { { "Content", "Are you sure you want to add " + Amount + " " + name + " to the storage?" } };
            var result = await DialogService.ShowAsync<ConfirmDialog>("Warning!", parameters);
            var dialogResult = await result.Result;
            if (dialogResult.Canceled) return;
        }
        catch (Exception e)
        {
    //ignored
        }
        if (!_products.Exists(x => x.ProductType.Id == Product.ProductType.Id))
        {
            ProductController.AddProduct(Product, Value);
        }
        else
        {
            var p = _products.Find(x => x.ProductType.Id == Value);
            if (p != null)
            {
                p.Quantity += Product.Quantity;
                ProductController.UpdateProduct(p);
            }
        }
        MudDialog.Close(DialogResult.Ok(true));
    }
}
