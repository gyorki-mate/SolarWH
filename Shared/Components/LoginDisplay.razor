@inject NavigationManager UriHelper;
@inject IDialogService DialogService
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


@if (IsAuthenticated && _role == "Admin")
{
    <MudGrid Justify="Justify.FlexEnd" Spacing="3">

        <MudItem Class="justify-end">
            <MudLink Color="Color.Info" Typo="Typo.h6" Href="/Profile">Current User: @_username</MudLink>
        </MudItem>
        <MudItem Class="justify-end">
            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="SignOut">Logout</MudButton>
        </MudItem>
        <MudItem Class="justify-center">
            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Register">Add New User</MudButton>
        </MudItem>
    </MudGrid>
}
else if (IsAuthenticated)
{
    <MudGrid Justify="Justify.FlexEnd" Spacing="3">

        <MudItem Class="justify-end">
            <MudLink Color="Color.Info" Typo="Typo.h6" Href="/Profile">Current User: @_username</MudLink>
        </MudItem>
        <MudItem Class="justify-end">
            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="SignOut">Logout</MudButton>
        </MudItem>
    </MudGrid>
}
else
{
    <MudGrid Justify="Justify.FlexEnd">
        <MudItem Class="justify-center">
            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="SignIn">Login</MudButton>
        </MudItem>
    </MudGrid>
}

@code {

    [Parameter]
    public bool IsAuthenticated { get; set; }

    [Parameter]
    public int Role { get; set; }

    private string _username;
    private string _role;
    DialogOptions _mediumWidth = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };


    protected override async void OnInitialized()
    {
        if (await SessionStorage.ContainKeyAsync("Role"))
        {
            _role = await SessionStorage.GetItemAsync<string>("Role");
            _username = await SessionStorage.GetItemAsync<string>("Username");
        }
        if (!await LocalStorage.ContainKeyAsync("Role")) return;
        _role = await LocalStorage.GetItemAsync<string>("Role");
        _username = await LocalStorage.GetItemAsync<string>("Username");
        Console.WriteLine(IsAuthenticated);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (await SessionStorage.ContainKeyAsync("Role"))
        {
            _role = await SessionStorage.GetItemAsync<string>("Role");
            var tempUname = await SessionStorage.GetItemAsync<string>("UserName");
            if (tempUname != _username)
            {
                _username = tempUname;
                StateHasChanged();
            }
        }
        if (await LocalStorage.ContainKeyAsync("Role"))
        {
            _role = await LocalStorage.GetItemAsync<string>("Role");
            var tempUname = await LocalStorage.GetItemAsync<string>("UserName");
            if (tempUname != _username)
            {
                _username = tempUname;
                StateHasChanged();
            }
        }
    }

    private void SignIn()
    {
        DialogService.Show<LoginDialog>("Login");
    }

    private void Register()
    {
        DialogService.Show<Register>("Add User", _mediumWidth);
    }

    private async void SignOut()
    {
        DialogParameters parameters = new() { { "Content", "Are you sure you want to logout? " } };

        var result = await DialogService.ShowAsync<ConfirmDialog>("Warning!", parameters);
        var res = await result.Result;
        try
        {
            if (!res.Data.Equals(true)) return;
            await SessionStorage.RemoveItemAsync("Role");
            await SessionStorage.RemoveItemAsync("isAuthenticated");

            await LocalStorage.RemoveItemAsync("Role");
            await LocalStorage.RemoveItemAsync("isAuthenticated");

            UriHelper.NavigateTo("/", forceLoad: true);
        }
        catch (Exception e)
        {
    //ignored
        }
    }

}