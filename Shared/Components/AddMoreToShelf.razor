@using Models
@inject IDialogService DialogService
@inject Interfaces.IProduct ProductController;
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <div class="d-flex flex-column py-1">
            <MudForm @ref="_form" @bind-IsValid="@_success">
                <MudGrid>
                    <MudItem xs="6">
                        <MudNumericField @bind-Value="Amount" Label="Amount" Variant="Variant.Text" Min="1" Max="10000" MaxLength="5" Immediate="true"/>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Disabled="@(!_success)" Color="Color.Info" Variant="Variant.Filled" OnClick="Close">Add products</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    
    [Parameter]
    public Product Product { get; set; }

    private bool _success;
    List<Product> _products = new();
    private IEnumerable<string> Options { get; set; } = new List<string>();
    private int Amount { get; set; }

    private bool overlimit;
    
    MudForm _form;

    protected override async Task OnInitializedAsync()
    {
        _products = await ProductController.GetAllNonStoredProducts();
    }

    private async void Close()
    {
        if (Amount > Product.ProductType.MaxCapacity - Product.Quantity)
        {
            overlimit = true;
            Amount = Product.ProductType.MaxCapacity - Product.Quantity;
        }
        else 
            overlimit = false;
        try
        {
            DialogParameters parameters;
            if (overlimit)
            {
                parameters = new() { { "Content", "The shelf can only store " + Amount + " more " + Product.ProductType.Name + ", do you want to add that many?"} };
            }
            else
                parameters = new() { { "Content", "Are you sure you want to add " + Amount + " more " + Product.ProductType.Name + " to the shelf?" } };
            var result = await DialogService.ShowAsync<ConfirmDialog>("Warning!", parameters);
            var dialogResult = await result.Result;
            if (dialogResult.Canceled) return;
        }
        catch (Exception e)
        {
    //ignored
        }
        Product.Quantity += Amount;
        ProductController.UpdateProduct(Product);
        var p = _products.Find(x => x.ProductType.Name == Product.ProductType.Name);
        if (Product == null) return;
        if (p != null)
        {
            p.Quantity -= Amount;
            if (p.Quantity == 0)
                ProductController.DeleteProduct(p.Id);
            else
                ProductController.UpdateProduct(p);
        }
        MudDialog.Close();
    }

}