@using Models
@inject IDialogService DialogService
@inject Interfaces.IProduct ProductController;

<MudDialog>
    <DialogContent>
        <div class="d-flex flex-column py-1">
            <MudForm @ref="_form" @bind-IsValid="@_success">
                <MudGrid>
                    <MudItem xs="6">
                        <MudSelect T="string" Label="Products" HelperText="Pick the desired Product" MultiSelection="false" @bind-Value="Value" @bind-SelectedValues="Options" Immediate="true">
                            @foreach (var product in _products)
                            {
                                var productText = product.ProductType.Name + " (available: " + product.Quantity + ")";
                                <MudSelectItem T="string" Value="@product.ProductType.Name">@productText</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6">
                      @foreach (var product in _products)
                              {
                                  if (product.ProductType.Name == Value)
                                  {
                                      MaxValue = product.ProductType.MaxCapacity;
                                  }
                              }
                        <MudNumericField @bind-Value="Amount" Label="Amount" Variant="Variant.Text" Min="1" @bind-Max="@MaxValue" MaxLength="5" Immediate="true"/>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Disabled="@(!_success)" Color="Color.Info" Variant="Variant.Filled" OnClick="Close">Add products</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public int ShelfId { get; set; }
    private bool _success;
    List<Product> _products = new();
    private IEnumerable<string> Options { get; set; } = new List<string>();
    private int Amount { get; set; }
    private string Value { get; set; } = null!;
    private int MaxValue { get; set; } = 0;
    MudForm _form;
    protected override async Task OnInitializedAsync()
    {
        _products = await ProductController.GetAllNonStoredProducts();
    }

    private async void Close()
    {
        await Task.Run(() =>
        {
            foreach (var productV in _products)
            {
                if (productV.ProductType?.Name != Value) continue;
                if (Amount > productV.ProductType.MaxCapacity)
                {
                    Amount = productV.ProductType.MaxCapacity;
                }
                if (Amount <= productV.Quantity) continue;
                Amount = productV.Quantity;
            }
        });
        var product = _products.Find(x => x.ProductType.Name == Value);
        var newProduct = new Product
        {
            IsStored = true,
            Quantity = Amount,
            ShelfId = ShelfId
        };
        try
        {
            DialogParameters parameters = new() { { "Content", "Are you sure you want to add " + Amount + " " + product.ProductType.Name + " to the shelf?" } };
            var result = await DialogService.ShowAsync<ConfirmDialog>("Warning!", parameters);
            var dialogResult = await result.Result;
            if (dialogResult.Canceled) return;
        }
        catch (Exception e)
        {
    //ignored
        }
        newProduct = ProductController.AddProduct(newProduct, product.ProductType.Id);
        var p = _products.Find(x => x.ProductType.Name == newProduct.ProductType.Name);
        if (newProduct == null) return;
        if (p != null)
        {
            p.Quantity -= newProduct.Quantity;
            if (p.Quantity == 0)
                ProductController.DeleteProduct(p.Id);
            else
                ProductController.UpdateProduct(p);
        }
        MudDialog.Close(DialogResult.Ok(newProduct));
    }
}
